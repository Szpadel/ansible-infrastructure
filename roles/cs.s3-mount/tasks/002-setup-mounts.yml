- name: Enable S3FS cache
  set_fact:
    s3fs_mount_opts: "{{ s3fs_mount_opts + ['use_cache=' ~ s3fs_cache_dir] }}"
  when: s3fs_use_cache and not s3fs_mount_use_goofys

- name: Create S3 mount remote source dirs
  become: no
  local_action:
    module: aws_s3
    bucket: "{{ s3fs_bucket.bucket.split(':')[0] }}"
    object: "{{ s3fs_bucket.bucket.split(':')[1] }}"
    mode: create
    region: "{{ aws_region }}"
  when: s3fs_bucket.bucket is search(':/')
  loop: "{{ s3fs_buckets }}"
  loop_control:
    loop_var: s3fs_bucket

# `findmnt` returns 1 if there are not mounts yet
- name: Get current S3 mounts
  shell: findmnt -l -n -o TARGET -t "{{ s3fs_mount_fstype }}"
  register: s3fs_current_mounts_check
  failed_when: s3fs_current_mounts_check.rc not in [0, 1]
  changed_when: false

# Use realpath to normalize trailing slashes and other discrepancies
- name: Set current S3 mounts
  set_fact:
    s3fs_current_mountpoints: "{{ s3fs_current_mounts_check.stdout_lines | map('realpath') | list }}"
    s3fs_target_mountpoints: "{{ s3fs_buckets | map(attribute='mountpoint') | map('realpath') | list }}"

- name: Remove S3 mounts that should not be present
  mount:
    path: "{{ s3fs_mountpoint.rstrip('/') ~ '/' }}"
    state: absent
  when: s3fs_mountpoint not in s3fs_target_mountpoints
  loop: "{{ s3fs_current_mountpoints }}"
  register: s3fs_mount_removal
  retries: 30
  delay: 1
  until: s3fs_mount_removal is not failed
  loop_control:
    loop_var: s3fs_mountpoint
    label: "{{ s3fs_mountpoint }}"

- name: Create S3 mount
  mount:
    path: "{{ s3fs_bucket.mountpoint }}"
    src: "{{ s3fs_mount_fuse_binary }}#{{ s3fs_bucket.bucket }}"
    fstype: fuse
    opts: "_netdev,allow_other,nonempty,auto,{{ s3fs_mount_opts | join(',') }}"
    state: mounted
  loop: "{{ s3fs_buckets }}"
  loop_control:
    loop_var: s3fs_bucket

