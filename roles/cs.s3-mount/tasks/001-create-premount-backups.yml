- name: Check if targets are existing directories
  stat:
    path: "{{ _s3fs_bucket.mountpoint }}"
  register: _s3fs_local_mountpoint_dirs
  changed_when: >-
    _s3fs_bucket.stat is defined
    and _s3fs_bucket.stat.isdir is defined
    and _s3fs_bucket.stat.isdir
  loop: "{{ s3fs_buckets }}"
  loop_control:
    loop_var: _s3fs_bucket

- name: Check if target directories are already mounted
  command: "mountpoint {{ _s3fs_bucket.mountpoint }}"
  register: _s3fs_local_mountpoints
  failed_when: no
  changed_when: _s3fs_local_mountpoints.rc == 0
  loop: "{{ s3fs_buckets }}"
  loop_control:
    loop_var: _s3fs_bucket

- name: Create temp dir for premount backup
  tempfile:
    state: directory
    suffix: s3fs_premount_backup
  register: _s3fs_premount_temp_dir

- name: Set mountpoint backup list
  set_fact:
    s3fs_premount_bind_mounts: "{{ s3fs_premount_bind_mounts + [_s3fs_premount_backup] }}"
  vars:
    _s3fs_premount_backup:
      source: "{{ _s3fs_mount_checks[0].mountpoint }}"
      target: "{{ _s3fs_premount_temp_dir.path ~ '/' ~  _s3fs_mount_checks[0].mountpoint.lstrip('/').rstrip('/') }}"
  when: >-
    _s3fs_mount_checks[1].rc != 0
    and _s3fs_mount_checks[2].stat is defined
    and _s3fs_mount_checks[2].stat.isdir is defined
    and _s3fs_mount_checks[2].stat.isdir
  with_together:
    - "{{ s3fs_buckets }}"
    - "{{ _s3fs_local_mountpoints.results }}"
    - "{{ _s3fs_local_mountpoint_dirs.results }}"
  loop_control:
    loop_var: _s3fs_mount_checks

- name: Print directories to be restored after mounting
  debug:
    msg: |
      Backing up preexsting S3FS mount targets:
      {% for backup in s3fs_premount_bind_mounts %}
        * {{ backup.source }} => {{ backup.target }}
      {% endfor -%}


